{"version":3,"sources":["sounds/boom.wav","sounds/clap.wav","sounds/hihat.wav","sounds/kick.wav","sounds/openhat.wav","sounds/ride.wav","sounds/snare.wav","sounds/tink.wav","sounds/tom.wav","components/Sound.js","actions/index.js","components/NowPlaying.js","components/Sounds.js","containers/App.js","serviceWorker.js","reducers/nowPlaying.js","reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","mapDispatchToProps","setSound","soundID","type","Sound","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","audioRef","React","createRef","playSound","bind","assertThisInitialized","reset","window","addEventListener","current","removeEventListener","event","keyCode","id","currentTime","play","react_default","a","createElement","className","onClick","letter","name","ref","src","source","Component","connect","state","nowPlaying","sound","soundData","sounds","find","components_Sound","soundFiles","ClapSound","HihatSound","KickSound","OpenHatSound","BoomSound","RideSound","SnareSound","TomSound","TinkSound","Sounds","map","i","assign","key","App","components_NowPlaying","components_Sounds","Boolean","location","hostname","match","arguments","length","undefined","action","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a610fc63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { setSound } from '../actions'\n\nconst mapDispatchToProps = {setSound};\n\nconst mapStateToProps = state => ({\n  soundID: state.nowPlaying\n})\n\nclass Sound extends Component {\n  constructor(props){\n    super(props)\n    this.audioRef = React.createRef();\n    this.playSound = this.playSound.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.playSound);\n    this.audioRef.current.addEventListener('ended', this.reset);\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.playSound);\n    this.audioRef.current.removeEventListener('ended', this.reset);\n  }\n  \n  playSound(event) {\n    if (event.keyCode === this.props.keyCode || event.type === 'click') {\n      this.props.setSound(this.props.id)\n      this.audioRef.current.currentTime = 0\n      this.audioRef.current.play()\n    }\n  }\n  \n  reset() {\n    this.props.setSound(null)\n  }\n\n  render() {\n    return (\n      <div className={this.props.soundID === this.props.id ? \"key playing\" : \"key\"}\n           onClick={this.playSound}>\n        <kbd>{this.props.letter}</kbd>\n        <span className=\"sound\">{this.props.name}</span>\n        <audio ref={this.audioRef} src={this.props.source}></audio>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sound)\n","export const setSound = soundID => ({\n  type: 'SET_SOUND',\n  soundID\n})\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Sound from './Sound'\nimport soundData from '../constants/sounds'\n\nconst mapStateToProps = state => ({\n  soundID: state.nowPlaying\n})\n\nconst NowPlaying = props => {\n  const sound = soundData.sounds.find(sound => sound.id === props.soundID)\n  return (\n    <div className=\"nowPlaying\">\n      {props.soundID !== null && <Sound {...sound} />}\n    </div>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(NowPlaying)\n","import React from 'react'\nimport soundData from '../constants/sounds'\nimport Sound from './Sound'\nimport BoomSound from '../sounds/boom.wav'\nimport ClapSound from '../sounds/clap.wav'\nimport HihatSound from '../sounds/hihat.wav'\nimport KickSound from '../sounds/kick.wav'\nimport OpenHatSound from '../sounds/openhat.wav'\nimport RideSound from '../sounds/ride.wav'\nimport SnareSound from '../sounds/snare.wav'\nimport TinkSound from '../sounds/tink.wav'\nimport TomSound from '../sounds/tom.wav'\n\nconst soundFiles = [ ClapSound,\n                     HihatSound,\n                     KickSound,\n                     OpenHatSound,\n                     BoomSound,\n                     RideSound,\n                     SnareSound,\n                     TomSound,\n                     TinkSound\n                   ]\n\nconst Sounds = () => {\n  const sounds = soundData.sounds.map((sound, i) => {\n    return <Sound key={sound.id}\n                  source={soundFiles[i]}\n                  {...sound} />\n  })\n  return (\n    <div className=\"keys\">{sounds}</div>\n  )\n}\n\nexport default Sounds\n","import React from 'react';\nimport '../App.css';\nimport NowPlaying from '../components/NowPlaying'\nimport Sounds from '../components/Sounds'\n\nconst App = () => (\n  <div className=\"container\">\n    <NowPlaying />\n    <Sounds />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const nowPlaying = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_SOUND':\n      return action.soundID\n    default:\n      return state\n  }\n}\nexport default nowPlaying\n","import { combineReducers } from 'redux'\nimport nowPlaying from './nowPlaying'\n\nexport default combineReducers({\n  nowPlaying\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}